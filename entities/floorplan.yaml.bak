      name: Demo Floorplan
      image: /local/custom_ui/floorplan/floorplan.svg
      stylesheet: /local/custom_ui/floorplan/floorplan.css
      
      # These options are optional
      # warnings:                  # enable warnings (to find out why things might ot be working correctly)
      # pan_zoom:                  # enable experimental panning / zooming
      # hide_app_toolbar:          # hide the application toolbar (when used as a custom panel)
      # date_format: DD-MMM-YYYY   # Date format to use in hover-over text
      
      last_motion_entity: sensor.template_last_motion
      last_motion_class: last-motion

      groups:

        - name: Sensors
          entities:
             -  weather.home
          #text_template: '${entity.state ? entity.state : "unknown"}'
          # An example of rounding up a number, i.e. a temperature of 90.1 becomes 91
          text_template: '${entity.state ? Math.ceil(entity.state) : "undefined"}'  
          class_template: '
            var temp = parseFloat(entity.state.replace("Â°", ""));
            if (temp < 50)
              return "temp-low";
            else if (temp < 90)
              return "temp-medium";
            else
              return "temp-high";
            '

        - name: Lights
          entities:
             - switch.front_porch
          states:
            - state: 'on'
              class: 'light-on'
            - state: 'off'
              class: 'light-off'
          action:
            domain: switch   # This optional parameter allows you to use other services such as homeassistant.toggle like here.
            service: toggle

#        - name: Switches
#          entities:
#             - switch.front_porch
#          states:
#            - state: 'on'
#              class: 'doorbell-on'
#            - state: 'off'
#              class: 'doorbell-off'

        - name: NVR
          entities:
             - binary_sensor.blue_iris_nvr
          text_template: '${(entity.state === "on") ? "online" : "offline"}'
          states:
            - state: 'off'
              class: 'danger-text'
            - state: 'on'
              class: 'success-text'

        - name: Binary sensors
          entities:
            - binary_sensor.front_hallway
            - binary_sensor.kitchen
            - binary_sensor.master_bedroom
            - binary_sensor.theatre_room
          states:
            - state: 'off'
              class: 'info-background'
            - state: 'on'
              class: 'warning-background'
          state_transitions:
            - name: On to off
              from_state: 'on'
              to_state: 'off'
              duration: 10

        - name: Cameras
          entities:
            - camera.front_door
          states:
            - state: 'idle'
              class: 'camera-idle'

        - name: Sonos
          entities:
            - media_player.living_room_1
            - media_player.living_room
            - media_player.dining_room
          states:
            - state: 'idle'
              class: 'sonos-off'
            - state: 'paused'
              class: 'sonos-off'
            - state: 'playing'
              class: 'sonos-on'
              
        - name: calendar
          entities:
            - calendar.inbox
#          text_template: '${entity.attributes.current_temperature ? entity.attributes.current_temperature : "undefined"}'
#
# The above text_template uses extended attributes from the climate.* objects to get current temperature.

        - name: Tesla Charger
          entities:            
            - binary_sensor.toms_car_charger_sensor
          states:
            - state: 'on'
              class: 'tesla-plugged'
            - state: 'off'
              class: 'tesla-unplugged'
#            - sensor.dark_sky_temperature
#            - sensor.last_message
        - name: Tesla Charge Status
          entities:
            - sensor.toms_car_battery_sensor            
          text_template: '${entity.state ? entity.state : "unknown"}'
#
# The above text_template uses jQuery syntax to search and replace any instance of 2 consecutive (or more) spaces in a string of text.
